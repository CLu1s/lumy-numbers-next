# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type User @model {
  id: ID!
  userName: String!
    @index(
      name: "byUserName"
      queryField: "userByUserName"
      sortKeyFields: ["id"]
    )
  bucketID: ID! @index(name: "byBucket", sortKeyFields: ["id"])
}

type Bucket @model {
  id: ID!
  name: String!
    @index(name: "byName", queryField: "bucketByName", sortKeyFields: ["id"])
  nanoid: String!
    @index(
      name: "byNanoid"
      queryField: "bucketByNanoid"
      sortKeyFields: ["id"]
    )
  collaborators: [User] @hasMany(indexName: "byBucket", fields: ["id"])
  transactionsByDate: [Transaction]
    @hasMany(indexName: "byBucketByDate", fields: ["id"])
  incomes: [Income] @hasMany(indexName: "byBucket", fields: ["id"])
  categories: [Category] @hasMany(indexName: "byBucket", fields: ["id"])
  fixedCostCategoryID: ID
  fixedCost: [FixedCost] @hasMany(indexName: "byBucket", fields: ["id"])
  projectsCategoryID: ID
  projects: [Project] @hasMany(indexName: "byBucket", fields: ["id"])
}

type Income @model {
  id: ID!
  amount: Float!
  date: String!
  description: String
  bucketID: ID! @index(name: "byBucket", sortKeyFields: ["date"])
}

type Transaction @model {
  id: ID!
  bucketID: ID! @index(name: "byBucketByDate", sortKeyFields: ["date"])
  amount: Float!
  categoryID: String
  categoryName: String
  categoryColor: String
  date: String!
  description: String
}

type Category @model {
  id: ID!
  icon: String!
  name: String!
  percentage: Int!
  color: String!
  bucketID: ID! @index(name: "byBucket", sortKeyFields: ["id"])
}

type FixedCost @model {
  id: ID!
  amount: Float!
  type: String
  status: String
  description: String
  bucketID: ID!
    @index(
      name: "byBucket"
      queryField: "fixedCostByBucket"
      sortKeyFields: ["id"]
    )
}

type Project @model {
  id: ID!
  name: String!
    @index(name: "byName", queryField: "projectByName", sortKeyFields: ["id"])
  description: String
  bucketID: ID!
    @index(
      name: "byBucket"
      queryField: "ProjectsByBucket"
      sortKeyFields: ["id"]
    )
  status: String
  startDate: String
  endDate: String
  amountGoal: Float
  movements: [Movement] @hasMany(indexName: "byProject", fields: ["id"])
}

type Movement @model {
  id: ID!
  projectID: ID!
    @index(
      name: "byProject"
      queryField: "movementsByProject"
      sortKeyFields: ["id"]
    )
  amount: Float!
  date: String!
  description: String
}
